"""
多态:需要使用父类的对象的地方,也可以使用子类的对象.但是反过来就不可以了.该使用子类对象的地方,不可以使用父类对象.因为父类中没有子类的方法和属性.

多态在其他语言中的定义:用父类的指针指向子类的对象.

多态:明确需要父类对象完成的地方,也可以使用子类对象完成. 因为子类继承了父类的方法属性之后也可以使用子类来表示父类的一些操作.

动态语言中是没有多态一说的,因为有数据类型的限制.Python中没有多态一说,因为Python中的参数啊,变量之类的没有数据类型的限制.

但是有个替代品-->鸭子类型   Python 语言使用鸭子类型来替代多态的.

父类引用子类

鸭子类型:只要能完成想要的的操作.不关注对象的类型,只关注能完成了需要的处理就行.     不关注对象的类型,只关注对象具有的行为(方法).

鸭子类型的理解:就是不管对象是什么,只管是不是可以完成所需要的操作.(不管白猫黑猫,能抓住老鼠就行)

因为Python中变量和参数无类型限制,所以使用鸭子类型.


封装:将数据和行为写到方法和属性值里面,变成私有的就是封装.

"""


class Meat:
	def __init__(self, name):
		self.name = name


class Ham(Meat):
	"""火腿"""
	pass


class SweetPotato:
	def __init__(self):
		self.name = '地瓜'


class Person:
	def __init__(self):
		self.name1 = '超哥'

	def eat(self, meat):  # meat就是一个参数,形参.将来的实参是什么不重要,只要能完成最后的结果.重点关注这个meat存的数据是啥,以及后面的操作是否能完成.
		print('%s要吃%s' % (self.name1, meat.name))


m1 = Meat('肉')
h1 = Ham('火腿')
dg1 = SweetPotato()


cg = Person()
cg.eat(dg1)  # 名字不影响其保存的结果.关注的点应该在存的结果是什么.
