"""
1.没定义__str__()的时候,print出来的东西不是自己想要的.

类默认转换的字符串基本没有我们想要的一些东西,仅仅包含了类的名称以及
实例的ID(理解为Python对象的内存地址即可).虽说这总比没有好,但确实是没什么用处啊.
所以,我们可能会手动打印对象的一些属性或者是在类里自己实现一个方法来返回我们需要的信息.


2.使用__str__实例类到字符串的转化

意思就是你使用print(类的实例)就会返回 def __str__() 方法中定义的返回值.如果直接  类的实例  就不会调用__str__方法


3.另一个就是__repr__方法,后者的工作方式与前者类似,但是它被调用的时机不同.

在print(类的实例)或者是"".format(类的实例)的时候,调用__str__(),
但是在直接  类的实例   的时候,调用__repr__

另外,列表以及字典等容器总是会使用__repr__方法.即使你显式的调用str方法,也是如此.
比如:str([类的实例]),依然是会调用__repr__方法.
如果我们需要显示的指定以何种方式进行类到字符串的转化,我们可以使用内置的str()或者repr()方法,它们会调用类中对应的双下划线方法.

str(类的实例)  输出: __str__,xxxx

repr(类的实例)  输出:__repr__,xxxx

4.__str__和__repr__的差别是什么

__str__和__repr__的差别究竟在哪里,它们的功能都是实现类到字符串的转换,它们的特点并没有体现出用途上的差异.

str():容易读
repr():开发人员使用,直接放命令行可以执行

因此,我们有个初步的答案.

__str__的返回结果可读性强.也就是说,__str__的意义是得到便于人们阅读的信息,就像像上面的"2018-04-03"一样.

__repr__的返回结果更准确.怎么说,__repr__存在的目的在于调试,便于开发者使用.细心的读者会发现将__repr__返回的方式直接复制到命令行上,是可以直接执行的.

5.自己写class的时候要加__repr__

如果你没有添加__str__方法,Python在需要该方法但找不到的时候,它会去调用__repr__方法.因此,我推荐在写自己的类的时候至少添加一个__repr__方法,这能保证类到字符串始终有一个有效的自定义转换方式.

"""