"""
yield from的意义:

对人类来说,几乎所有最重要的信息都在靠近顶部的某个段落里.

把迭代器当作生成器使用,相当于把子生成器的定义体内联在yield from表达式中.此外,子生成器可以执行return语句,返回一个值,而返回的值会成为yield from表达式的值.

阐明了下述四点:

1.>子生成器产出的值都直接传给委派生成器的调用方(即客户端代码)

2.>使用send()方法发给委派生成器的值都直接传给子生成器.如果发送的值是None,那么会调用子生成器的__next__方法.如果发送的值不是None,那么会调用子生成器的send()方法.如果调用的方法抛出StopIteration异常,那么委派生成器恢复运行.任何其他异常都会向上冒泡,传给委派生成器.

3.>生成器退出时,生成器(或子生成器)中的return expr表达式会触发StopIteration(expr)异常抛出.

4.>yield from表达式的值是子生成器终止时传给StopIteration异常的第一个参数.

yield from结构的另外两个特性与异常和终止有关.

	1.>传入委派生成器的异常,除了GeneratorExit之外都传给子生成器的throw()方法.如果调用throw()方法时抛出StopIteration异常,委派生成器恢复运行.StopIteration之外的异常会向上冒泡,传给委派生成器.

	2.>如果把GeneratorExit异常传给委派生成器,或者在委派生成器上调用close()方法,那么在子生成器上调用close()方法,如果它有的话.如果调用close()方法导致异常抛出,那么异常会向上冒泡,传给委派生成器;否则,委派生成器抛出GeneratorExit异常.


yield from 的具体语义很难理解,尤其是处理异常的那两点.



"""