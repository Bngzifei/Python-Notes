"""
自己定义上下文管理器之前,先看一下Python标准库文档中的contextlib介绍.除了前面提到的redirect_stdout函数,contextlib模块中还有一些类和其他函数,使用范围更广.


closing:
	
	如果对象提供了close()方法,但没有实现__enter__/__exit__协议,那么可以使用这个函数构建上下文管理器.

suppress:
	
	构建临时忽略指定异常的上下文管理器

@contextmanager
	
	这个装饰器把简单的生成器函数变成上下文管理器,这样就不用创建类去实现管理器协议了.

ContextDecorator
	
	这是个基类,用于定义基于类的上下文管理器.这种上下文管理器也能用于装饰器,在受管理的上下文中运行整个函数.

ExitStack
	
	这个上下文管理器能进入多个上下文管理器.with块结束时,ExitStack按照后进先出的顺序调用栈中各个上下文管理器的__exit__方法.如果事先不知道with块要进入多少个上下文管理器,可以使用这个类.例如,同时打开任意一个文件列表中的所有文件.
	显然,在这些实用工具中,使用最广泛的是@contextmanager装饰器,因此要格外留心.这个装饰器也有迷惑人的一面,因为它与迭代无关,却要使用yield语句.由此可以引出协程.

"""