"""
从Python2.6开始,标准库提供了抽象基类.大多数抽象基类在collections.abc模块中定义,不过在其他地方也有.例如,numbers和io包中有一些抽象基类.但是,collections.abc中的抽象基类最常用.

1.collections.abc模块中的抽象基类.

标准库中有两个名为abc的模块,这里说的是collections.abc.为了减少加载时间,Python3.4在collections包之外实现这个模块.因此要与collections分开导入.另一个模块就是abc,这里定义的是abc.ABC类.每个抽象基类都依赖这个类,但是不用导入它,除非定义新抽象基类.


其实,抽象方法可以有实现代码.即使实现了,子类也必须覆盖抽象方法,但是在子类中可以使用super()函数调用抽象方法,为他添加功能,而不是从头开始实现


强调抽象基类可以提供具体方法,只要依赖接口中的其他方法就像.


然而,abc.ABC是Python3.4新增的类,因此如果你使用的是旧版Python,那么无法继承现有的抽象基类,此时,必须在class语句中使用metaclass=关键字,把值设为abc.ABCMeta.

metaclass = 关键字参数Python3引入的.在Python2中必须使用__metaclass__类属性.

虚拟子类不会继承注册的抽象基类,而且任何时候都不会检查它是否符合抽象基类的接口,即便在实例化时也不会检查,为了避免运行时错误,虚拟子类要实现所需的全部方法.


"""

class Sized(metaclass=ABCMeta):
	__slots__ = ()

	@abstractmethod
	def __len__(self):
		return 0

	@classmethod
	def __subclasshook__(cls,C):
		if cls is Sized:
			# 对C.__mro__(即C及其超类)中所列的类来说,如果类的__dict__属性中有名为__len__的属性...
			if any("__len__" in B.__dict__ for B in  C.__mro__):
				return True

		return NotImplemented

"""
foo协议foo接口foo类对象这三种措辞是同一个意思.协议风格的接口与继承完全没有关系,实现同一个协议的各个类时相互独立的.在鸭子类型中,接口就是这样的.

不要自己定义抽象基类,除非你要构建允许用户扩展的框架---然而大多数情况下并非如此.日常使用中,我们与抽象基类的联系应该是创建现有抽象基类的子类,或者使用限制的抽象基类注册.此外,我们可能还会在isinstance检查中使用抽象基类,但这比继承或注册更少见.需要自己从头编写新抽象类的情况少之又少.

尽管抽象基类使得类型检查变得更容易了,但不应该在程序中过度使用它.Python的核心在于它是一门动态语言,它带来了极大的灵活性.如果处处都强制实行类型约束,那么会使代码变得更加复杂,而本不应该如此.我们应该拥抱Python的灵活性.

检查对象是否实现了接口,注册提供方,然后查询指定接口的提供方.一开始,这个包是Zope3核心的一部分,不过它可以在Zope外部使用,而且已经有人这么做了.


实现可选的静态类型检查,即使用函数注解实现. 
这个功能的目的是让程序员在函数定义中使用注解声明参数和返回值的类型,但这是可选的.关键在于可选二字.仅当你想得到注解的好处和限制时才需要添加注解,而且可以在一些函数中添加,在另外一些函数中不添加.

TypeScript添加了新的语言结构(如模块,类,显式接口,等等),允许声明变量类型,而且最终编译成常规的JavaScript.目前来看,Python的可选静态类型没这么大的雄心.

Python依旧是一门动态类型语言,作者从未打算强制要求使用类型提示.甚至不会把它变成约定.

Python是弱类型语言吗?

	由于缺少统一的术语,讨论语言类型方面的话题时有时会让人不明其意.有些人说Python是弱类型语言,把Python与JavaScript和PHP归为一类.讨论类型时,最好考虑两条不同的坐标线.


强类型和弱类型
	
	如果一门语言很少隐式转换类型,说明他是强类型语言;如果经常这么做,说明他是弱类型语言.Java,C++和Python是强类型语言.PHP,JavaScript和Perl是弱类型语言.

静态类型和动态类型
	
	在编译时检查类型的语言是静态类型语言,在运行时检查类型的语言是动态类型语言.静态类型需要声明类型(有些现代语言使用类型推导避免部分类型声明).Fortran和Lisp是最早的两门语言.现在仍在使用,它们分别是静态类型语言和动态类型语言.

强类型能及早发现缺陷
	
	静态类型使得一些工具(编译器和IDE)便于分析代码,找出错误和提供其他服务(优化,重构,等等).动态类型便于代码重用,代码行数更少,而且能让接口自然成为协议而不提早实行.

综上,Python是动态强类型语言.

猴子补丁
	
	猴子补丁的名声不太好.如果滥用,会导致系统难以理解和维护.补丁通常与目标紧密耦合,因此很脆弱.另一个问题是,打了猴子补丁的两个库可能相互牵绊,因为第二个库可能撤销了第一个库的补丁.

	不过猴子补丁也有它的作用,例如可以在运行时让类实现协议.适配器设计模式通过实现全新的类解决这种问题.

与Ruby和JavaScript不同,Python不允许为内置类打猴子补丁.其实我觉得这是优点,因为这样可以确保str对象的方法始终是那些.这一局限能减少外部库打的补丁有冲突的概率.

"""