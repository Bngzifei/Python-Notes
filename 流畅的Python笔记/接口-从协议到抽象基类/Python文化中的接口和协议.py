"""
引入抽象基类之前,Python就已经非常成功了,即便现在也很少有代码使用抽象基类.
我们把协议定义为非正式的接口,是让Python这种动态类型语言实现多态的方式.


接口在动态类型语言中是怎么运作的呢?首先,基本的事实是,Python语言没有interface关键字,而且除了抽象基类,每个类都有接口:类实现或继承的公开属性(方法或数据属性),包括特殊方法,如__getitem__或__add__.


安装定义,受保护的属性和私有属性不在接口中:即便受保护的属性也只是采用命名约定实现的(单下划线);私有属性可轻松地访问,原因也是如此.不要违背这些约定.


另一方面,不要觉得把公开数据属性放入对象的接口中不妥.因为如果需要,总能实现读值方法和设值方法,把数据属性变成特性.使用obj.attr句法的客户代码不会受到影响.Vector2d类就是这么做的.



关于接口,这里有个实用的补充定义:对象公开方法的子集,让对象在系统中扮演特定的角色.Python文档中的文件类对象,或可迭代对象就是这个意思.这种说法指的不是特定的类.接口时实现特定角色的方法集合,这样理解正式Smalltalk程序员所说的协议.其他动态语言社区都借鉴了这个术语.协议与继承没有关系.一个类可能会实现多个接口,从而让实例扮演多个角色.

协议是接口,但不是正式的(只由文档和约定定义),因此协议不能像正式接口那样施加限制.一个类可能只实现接口部分,这是允许的.有时,某些API只要求文件类对象返回字节序列的.read()方法.在特定的上下文中可能需要其他文件操作方法,也可能不需要.

对Python程序员来说,X类对象,X协议和X接口都是一个意思.


序列协议是Python最基础的协议之一.即便对象只实现了那个协议最基本的一部分,解释器也会负责任地处理.


"""