# Python文件操作（I/O）

"""
Python 文件IO(输入/输出)是比较乏味的事情,因为看不到明显的运行效果,但IO
是所有程序都必需的部分.使用输入机制,允许程序读取外部数据(包括来自磁盘,光盘
等存储设备的数据),用户输入数据;使用输出机制,允许程序记录运行状态,将程序数据
输出到磁盘,光盘的存储设备中.

Python提供有非常丰富的文件IO支持,它既提供了pathlib和os.path来操作各种路径,
也提供了全局的open()函数来打开文件(在打开文件之后,程序既可读取文件的内容,
也可向文件输出内容.)而Python提供了多种方式来读取文件内容,因此非常简单,灵活.

此外,在Python的os模块下也包含了大量进行文件IO的函数,使用这些函数来读取,写入
文件也很方便,因此读者可以根据需要选择不同的方式来读写文件.

Python还提供了tempfile模块来创建临时文件和临时目录,tempfile模块下的高级API
会自动管理临时文件的创建和删除;当程序不再使用临时文件和临时目录时,程序会自动删除
临时文件和临时目录.

"""

"""
1.在变量,序列以及对象中存储的数据时暂时的,程序结束之后就会丢失,如果想永久保存,
就是得将其存储到磁盘文件中.

2.一个文件，必须在打开之后才能对其进行操作，并且在操作结束之后，还应该将其关闭。
者三步的顺序不能打乱。


3.open()是否需要缓冲区
众所周知，计算机外设（比如硬盘，网络）的IO速度远远低于访问内存的速度，而程序执行
IO时要么将内存中的数据写入外设，要么将外设中的数据读取到内存，如果不用缓存，
就必须等外设输入或者输出一个字节后，内存中的程序才能输出或输入一个字节，这意味着内存
中的程序大部分时间处于等待状态。
内存中的程序的读写速度很快。如果不使用缓存，则程序必须等待外设进行同步读写。打个形象的比喻：
在一条堵车的马路上开着跑车，必须等前面的车开一点，跑车才能前进一点。


4.因此，一般建议打开缓存。在打开缓存之后，当程序执行输出时，程序会先将数据输出到缓冲区，
而不同等待外设同步输出，当程序把所有数据都书胡扯到缓存区之后，程序就可以去干其他事情
了，留着缓存区慢慢同步到外设即可；反过来，当程序执行输入时，程序会先等外设数据读入缓冲区中，
而不用等待外设同步输入。


5.在使用open()函数时，如果其第三个参数是0或者False，那么该函数打开的文件就是不带缓存的，
如果其第三个参数是1或True，则该函数打开的文件就是带缓存的。此时程序执行IO将具有更好的性能。
如果其第三个参数是大于1的整数，则该整数用于指定缓存区的大写（单位是字节）；如果其第三个参数为
任何负数，则代表使用默认的缓冲区大小。


6.open()文件对象常用的属性：
成功打开文件之后，可以调用文件对象本身拥有的属性获取当前文件的部分信息，其常见的属性为：
file.closed:判断文件是否已经关闭
file.mode：返回被打开文件的访问模式
file.name：返回文件的名称。
"""

# 以默认方式打开文件
f = open("open_test.py")

# 访问文件的编码方式
print(f.encoding)  # cp936

# 访问文件的访问模式
print(f.mode)  # r

# 访问文件是否已经关闭
print(f.closed)  # 该文件目前仍然是打开的,没有关闭故为False

# 访问文件对象打开的文件名
print(f.name)  # open_test.py

