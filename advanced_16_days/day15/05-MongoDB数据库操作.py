print('------MongoDB数据库:-----')
"""
1.>数据库的一些基本操作命令:
	db.help();---> 查看命令帮助
	use 数据库;-->切换数据库
	show dbs; -->查询所有数据库
	db.dropDatabase();删除当前使用的数据库
	db.getName();查看当前使用的数据库
	db.version();当前db的版本
	db.addUser('name');添加用户
	db.addUser('userName','123456',true);
	show users;显示当前所有用户
	db.removeUser('userName');删除用户
	db.数据库coll.count();查询当前集合的数据条数
	
2.>Python中调用mongo数据库的包叫什么?
	Pymongo
"""

"""
1.>MongoDB是一个面向文档的数据库系统.使用c++编写,不支持sql.但有自己功能强大的查询语法.

MongoDB使用BSON作为数据存储和传输的格式,BSON是一种类似JSON的二进制序列化文档,支持嵌套对象和数组.

MongoDB很像mysql,document对应mysql的row,collection对应mysql的table

应用场景:
	1.>网站数据:mongo非常适合实时的插入,更新与查询,并具备网站实时数据存储所需的复制及高度伸缩性.
	2.>缓存:由于性能很高,mongo也适合作为信息基础设施的缓存层.在系统重启之后,由mongo搭建的持久化缓存可以避免下层的数据源过载.
	3.>大尺寸,低价值的数据:使用传统的关系数据库存储一些数据时候可能会比较贵,在此之前,很多程序员往往会选择传统的文件进行存储.
	4.>高伸缩性的场景:mongo非常适合由数十或者数百台服务器组成的数据库.
	5.>用于对象及json数据的存储:mongo的bson数据格式非常适合文档格式化的存储及查询.
	6.>重要数据:mysql,一般数据:mongo,临时数据:memcache
	7.>对于关系数据表而言,mongodb提供了一个更快速的视图view,而对于PHP程序而言,mongodb可以作为一个持久化的数组来使用,并且这个持久化的数组还可以支持排序,条件限制等功能.

不适用场景:
	1.>高度事物性的系统:例如银行或会计系统.传统的关系型数据库目前还是更适用于需要大量原子性复杂事务的应用程序.
	2.>传统的商业智能应用:针对特定问题的BI数据库会产生高度优化的查询方式.对于此类应用,数据仓库可能是更合适的选择.
	3.>需要sql的场景
	4.>重要数据,关系数据

优点:
	1.>弱一致性,更好的保证用户的访问速度
	2.>文档结构的存储方式,能够更便捷的获取数据
	3.>内置GRIDFS,高效存储二进制大文件<比如照片和视频>
	4.>支持复制集,主备,互为主备,自动分片等特性
	5.>动态查询
	6.>全索引支持,扩展到内部对象和内嵌数组
缺点:
	1.>不支持事务
	2.>mongodb占用空间过大,维护工具不够成熟


"""
