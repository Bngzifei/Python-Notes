1.先确认是否安装了virtualenv
执行命令:pip list | grep virtualenv

如果没有安装,则执行:
pip install -i pypi镜像地址 --trusted-host hosts文件中的host域名 virtualenv


2.安装virtualenvwrapper:
pip install -i pypi镜像地址 --trusted-host hosts文件中的host域名 virtualenvwrapper

3.升级pip:
pip install -i pypi镜像地址 --trusted-host hosts文件中的host域名 --upgrade pip

4.创建虚拟环境:
	virtualenv 虚拟环境名称  例如: virtualenv bng
	
创建基于Python3的虚拟环境: virtualenv bng -p python3

注意:--system-site-packages 参数就是以系统中已安装的包为基础全部安装到新建的虚拟环境中.

5.进入虚拟环境:
source BNG/bin/activate

6.退出虚拟环境:
deactivate

7.安装指定版本的pytest==3.3.0
注意这一步操作之前需要先进入虚拟环境:source BNG/bin/activate
pip install -i pypi镜像地址 --trusted-host hosts文件中的host域名 pytest==3.3.0

8.使用的时候记得加命令参数:python -m
例如这种形式:
python -m pytest host_service/tests/itests/tests/resource_group/test_create_repairation.py

之后记得先上传itest包,安装.然后再去上传host_service包,安装,执行测试命令即可

10.配置环境变量
用vim打开~/.bashrc

先 cd 切换到主目录 ~
或者使用命令 :cd ~

然后:
vim ~/.bashrc


复制粘贴下面的:
export WORKON_HOME=~/.virtualenvs
source /usr/bin/virtualenvwrapper.sh


PATH=$PATH:/usr/bin/virtualenvwrapper.sh

export PATH

11.执行.bashrc使文件生效(上来就直接执行这个话,每次远程连接主机都是需要的):
source ~/.bashrc

12.使用mkvirtualenv 创建虚拟环境
mkvirtualenv bng
创建完成之后 会自动进入虚拟环境

注意内网安装的时候,依赖于本地已有的库:
mkvirtualenv --system-site-packages bng
这样就把本地安装好的库完整的安装到了虚拟环境中


13.virtualenvwrapper其他操作
# 退出虚拟环境
deactivate

# 查看当前有哪些虚拟环境
workon

14.删除虚拟环境

rmvirtualenv venv

# 进入指定的虚拟环境 workon [虚拟环境名]
workon test2

# 在指定虚拟环境安装包
# 1. 进入指定虚拟环境
# 2. 查看当前虚拟环境中有哪些安装包
# 3. 安装包
workon test2
pip list
pip install requests

# 卸载包
pip uninstall requests


virtualenvwrapper永久生效:
方法三：修改/etc/profile文件使其永久性生效，并对所有系统用户生效，在文件末尾加上如下代码

WORKON_HOME=~/.virtualenvs
VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'
VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
source /usr/bin/virtualenvwrapper.sh


执行: source /etc/profile 使其配置生效

下次启动就不需要了！会自动启动virtualenvwrapper.sh

1.vim /etc/profile :修改配置,在其末尾添加如下内容

WORKON_HOME=~/sf/data/local/libin/
VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--system-site-packages'
VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
source /usr/bin/virtualenvwrapper.sh

执行: source /etc/profile 使其配置生效

2.mkvirtualenv 你的环境名字: 创建虚拟环境

3.workon 环境名字:进入虚拟环境

4.deactivate: 退出虚拟环境


Not uninstalling phoenix at /usr/lib/python2.7/site-packages, outside environment /root/sf/data/local/libin/bng


桂少雄问题:
virtualenv -p /usr/bin/python2.7 --no-wheel --no-pip --no-setuptools --system-site-packages gsxEnv
加上--no-setuptools 就可以


如果报这个错误:OSError: Command /root/sf/data/local/libin/bng/bin/python2.7 - setuptools pip wheel failed with error code 1
就执行下面这个
实在不行的话就是这句:
mkvirtualenv -p /usr/bin/python2.7 --no-wheel --no-pip --system-site-packages +你环境的名字
mkvirtualenv -p /sf/data/local/env/bng/bin/python2.7 --no-wheel --no-pip --system-site-packages +你环境的名字

实在不行就用这个命令:意思就是不使用系统真实环境中的pip setuptools
mkvirtualenv -p /usr/bin/python2.7 --no-wheel --no-pip --no-setuptools --system-site-packages bng


/sf/data/local/virenv


/sf/data/virenv



WORKON_HOME=~/sf/data/local/virenv/
VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--system-site-packages'
VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
source /usr/bin/virtualenvwrapper.sh



rpm安装:

rpm -ivh libffi-devel-3.0.13-18.el7.x86_64.rpm


因此我们可以添加软链到执行目录下/usr/bin
创建软链接
ln -s /usr/local/python3/bin/python3 /usr/bin/python3


注意: VIRTUALENVWRAPPER_PYTHON 指定python的版本
virtualenvwrapper.sh 这个文件 使用 find / -name virtualenvwrapper.sh 去搜索所在位置

vim /etc/profile
# Python3 虚拟环境配置
WORKON_HOME=/root/RepositoryDisk/VirtualEnv
VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--system-site-packages'
VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3
source /usr/local/bin/virtualenvwrapper.sh

激活配置:
source /etc/profile


安装:
pip install -r requirements.txt

导出:
pip freeze > requirements.txt