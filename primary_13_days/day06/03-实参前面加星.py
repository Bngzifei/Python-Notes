print('实参前面加*:')
"""
在形参前面加一个*表示它是一个可变参数可以接收任意数量的普通实参,可以包装成一个元组

在形参前面加两个*,表示它是一个字典类型的可变参数,可以接收任意数量的关键字参数,并且包装成字典.

实参前面加*的作用是解开,只是在容器前面加*(list,dict,字符串,tuple类型的数据)  容器数据类型:列表,字典,元组,集合.
形参前面加*的作用是打包,

在容器类型的实参前面加*,会把容器中的元素拆开,变成一个一个的普通实参.
在字典类型的实参加2个*,会把字典转变成关键字参数(a = 2, b = 3)这种意思.

面试:紧张是因为在意.不在意才行,要问公司的开发情况,结合自己写代码的情况,在什么地方用过遇到的问题,怎么解决的,
面试基本30分钟以上,能问到薪资的时候和砍价一样,不要一下答应.多写一点,可以有讨价还价的余地

"""


def func1(b, a):
	print(b)
	print(a)


# # print(c)
#
# tuple1 = (2, 3)
# list1 = [10, 20]
# str1 = "56"
dict1 = {"m": 56, "n": 23}
dict2 = {"a": 59, "b": 23}  # 'a' = 59, 'b' = 23
# func1(*tuple1)  # *(2,3) ---> 2,3
# func1(*list1)  # [10,20] ---> 10,20
# func1(*str1)  # "56" --> '5','6'
func1(*dict1)  # {"m": 56, "n": 23}  --> "m","n",解出来是key的值,n,m.
func1(**dict2)  # {"a": 59, "b": 23}  --> 59,23,转换成了关键字参数,解出来是value的值,59,23


def func2(*args, **kwargs):
	print(args)  # ((1, 2), {'b': 20, 'c': 30})  两个包装成了一个元组
	print(kwargs)  # {} 空的字典


def func3(*args1, **kwargs1):
	print(args1)  # 输出元组(1,2)
	print(kwargs1)  # 输出字典{'b': 20, 'c': 30}
	# func2(args1, kwargs1)  # func2((1,2),{'b': 20, 'c': 30})
	func2(*args1, **kwargs1)  # 这里是调用函数了,不是定义函数,所以可以加*号来进行解包的作用了.(1, 2) , {'b': 20, 'c': 30}


# func3(1, 2, b=90, c=30)
"""
遇到调不出来的时候可以分开断点调试了,每一步都写,一步一步的往下调,输出结果.
每天都回头来看看,记得这个是啥,能去查.知道的多点,思路就多点

"""
