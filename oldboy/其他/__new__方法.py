# -*- coding: utf-8 -*-
# @Author: Marte
# @Date:   2019-05-08 10:45:43
# @Last Modified by:   Marte
# @Last Modified time: 2019-05-09 16:16:42

# 构造
'''
__new__在Python :类里面的构造方法__init__负责将类的实例化，而在__init__调用之前，__new__决定是否要使用该__init__方法，
因为__new__可以调用其他类的构造方法或者直接返回别的对象来作为本类 的实例。
如果将类比喻为工厂，那么__init__方法则是该工厂的生产工人，__init__方法接受的  初始化参数则是生产所需原料，__init__方法会按照方法中的语句负责将原料加工成实例以供工厂出货。而 __new__则是生产部经理，__new__方法可以决定是否将原料提供给该生产部工人，同时它还决定着出 货产品是否为该生产部的产品，因为这名经理可以借该工厂的名义向客户出售完全不是该工厂的产品。
__new__方法的特性：
__new__方法是在类准备将自身实例化时调用。
__new__方法始终都是类的静态方法，即使没有被加上静态方法装饰器。



'''
# 通常来说，新式类开始实例化时，new()方法会返回cls（cls指代当前类）的实例，然后该类的 init()方法作为构造方法会接收这个实例
#（即self）作为自己的第一个参数，然后依次传入new ()方法中接收的位置参数和命名参数。
# 注意：如果new()没有返回cls（即当前类）的实例，那么当前类的init()方法是不会被调用 的。
# 如果new()返回其他类（新式类或经典类均可）的实例，那么只会调用被返回的那个类的构造方 法。



# python中的__new__方法:
# 1.>创建类时先执行type的__init__方法
# 2.>当一个类实例化时(创建一个对象)执行type的__call__方法,__call__方法的返回值就是实例化的对象__call__内部调用

# 类.__new__方法:创建一个对象
# 类.__init__方法:初始化一个对象


# 实例化对象是谁取决于__new__方法,__new__返回什么就是什么


# __new__()方法的特性:

# 1.>__new__()方法是在类准备将自身实例化时调用。
# 2.>__new__()方法始终都是类的静态方法,即使没有被加上@staticmethod装饰器



class Foo(object):
    pass

obj=Foo()  #默认是调用该类的直接父类的__new__()方法来构造该类的实例
print(obj) #打印结果：<__main__.Foo object at 0x000002636FEAA208>

# 事实上如果（新式）类中没有重写__new__()方法，即在定义新式类时没有重新定义__new__()时，Python默认是调用该类的直接父类的__new__()方法来构造该类的实例，
# 如果该类的父类也没有重写__new__()，那么将一直按此规矩追溯至object的__new__()方法，因为object是所有新式类的基类。

class F1(object):
　　# 重写__new__方法，返回这个重写的__new__方法
    def __new__(cls, *args, **kwargs):
        return 123

obj=F1() # 实例化对象是谁取决于__new__方法,__new__返回什么就是什么
print(obj,type(obj))  #打印结果：123 <class 'int'>


class F2(object):
    pass

class F3(object):
    def __new__(cls, *args, **kwargs):
        return F2()

obj=F3()    # 实例化对象是谁取决于__new__方法,__new__返回什么就是什么
print(obj)  # <__main__.F2 object at 0x00000210119BA4A8>



# 如果要得到当前类的实例，应当在当前类中的 __new__() 方法语句中调用当前类的父类的 __new__() 方法。
# 例如，如果当前类是直接继承自 object，那当前类的 __new__() 方法返回的对象应该为：


def __new__(cls, *args, **kwargs):

    return object.__new__(cls)



# __new__至少要有一个参数cls，代表要实例化的类，此参数在实例化时由Python解释器自动提供


# __new__必须要有返回值，返回实例化出来的实例，这点在自己实现__new__时要特别注意，可以return父类__new__出来的实例，或者直接是object的__new__出来的实例


# __init__有一个参数self，就是这个__new__返回的实例，__init__在__new__的基础上可以完成一些其它初始化的动作，__init__不需要返回值