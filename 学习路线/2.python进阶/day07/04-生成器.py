print('生成器...')

"""
生成器是一类特殊的迭代器(既然是迭代器了,那么当然就是可迭代对象).自己就是.不需要写__iter__(),__next__()这两个方法.
自己天生就是迭代器.
仍然可以使用iter(),next() 方法.

分类:
	列表推导式[]:  ---> () 就是  生成器表达式 :():<generator:>        
	

生成器里面存放的不是具体的数据,只是存放的是一个算法.
生成器表达式和列表推导式的异同:
	不同:			(表达式)      [表达式]
	---------------|------------|-----------	
		产生的对象   生成器对象   列表对象
		占用内存     少           多
	---------------|------------|-----------
	相同:         	使用结果一致

方式1:生成器表达式  列表推导式的[] 换成()之后就是生成器
		首先要理解 列表推推导式 --> 返回值是一个列表
	
方式2:生成器函数   含有yield 关键字
"""


def fib(n):
	num1, num2 = 1, 1

	count = 0

	# 1.暂时挂起当前函数  将后面的值返回给调用生成器的地方
	yield 100  # 返回值
	# 2.当再次调用生成器函数的时候, 会恢复当前函数继续执行
	yield 101  # 返回值


if __name__ == '__main__':
	# 生成器函数调用   不会执行函数代码 唯一的目的就是:产生生成器对象
	f = fib(10)

	# 调用生成器<迭代器>,获取下一个元素的值
	print(next(f))
	print(next(f))

# 断点调试只适用于少量代码的时候,多的时候不管用
# print(next(f))
