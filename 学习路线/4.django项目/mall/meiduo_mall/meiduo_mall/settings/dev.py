# dev:development开发阶段的配置信息
"""
Django settings for meiduo_mall project.

Generated by 'django-admin startproject' using Django 1.11.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
# 注意:os.path  主要用来路径拼接   sys.path  主要用来导包
import datetime
import os, sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# /home/python/PycharmProjects/meiduo_sz20/meiduo_mall/meiduo_mall
# print(BASE_DIR)  可以看出,BASE_DIR表示当前文件所在目录的上两级目录
# print(sys.path)

# 给系统的导包列表中添加一个导包路径
sys.path.append(os.path.join(BASE_DIR, 'apps'))
# print(sys.path)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'aivl%e00k64&n$bl9tv*_cnpl*nypbe)5lsq3bm(#ufzscw%&('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'www.meiduo.site', 'api.meiduo.site']

# Application definition

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',

	# 中间都是第三方的应用.养成良好的编码习惯
	'rest_framework',  # 注册DRF   如果应用中用到模板或者模型建表时一定要注册
	'corsheaders',  # 注册cors解决跨域请求问题
	'ckeditor',  # 富⽂本编辑器
	'ckeditor_uploader',  # 富⽂本编辑器上传图片模块
	'django_crontab',  # 定时任务
	'haystack',  # 对接搜索引擎

	# 下面的都是自己的子应用
	'users.apps.UsersConfig',  # 注册users应用
	'verifications.apps.VerificationsConfig',  # 注册verifications应用
	'oauth.apps.OauthConfig',  # qq第三方登录
	'areas.apps.AreasConfig',  # 省市区
	'goods.apps.GoodsConfig',  # 商品
	'contents.apps.ContentsConfig',  # 广告

]

MIDDLEWARE = [
	# 注意:cors是在中间件最开始的位置,因为跨域的问题需要在程序运行的最开始的时候就得解决掉.下面就是添加白名单了
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meiduo_mall.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [os.path.join(BASE_DIR, 'templates')],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'meiduo_mall.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases
# 数据库配置
DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.mysql',
		'HOST': '127.0.0.1',  # 数据库主机
		'PORT': 3306,  # 数据库端口
		'USER': 'meiduo',  # 数据库用户名
		'PASSWORD': 'meiduo',  # 数据库用户密码
		'NAME': 'meiduo_mall'  # 数据库名字
	}
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

# LANGUAGE_CODE = 'en-us'
#
# TIME_ZONE = 'UTC'

# 本地化设置
LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

# 配置redis数据库作为缓存后端
CACHES = {
	"default": {  # 这个redis缓存默认作为省市区三级联动查询的缓存
		"BACKEND": "django_redis.cache.RedisCache",
		"LOCATION": "redis://192.168.17.128:6379/14",
		"OPTIONS": {
			"CLIENT_CLASS": "django_redis.client.DefaultClient",
		}
	},
	"session": {
		"BACKEND": "django_redis.cache.RedisCache",
		"LOCATION": "redis://192.168.17.128:6379/1",
		"OPTIONS": {
			"CLIENT_CLASS": "django_redis.client.DefaultClient",
		}
	},
	# 这里新增一个redis缓存数据库,别名叫verify_codes,使用redis的第2号库
	"verify_codes": {
		"BACKEND": "django_redis.cache.RedisCache",
		"LOCATION": "redis://192.168.17.128:6379/2",
		"OPTIONS": {
			"CLIENT_CLASS": "django_redis.client.DefaultClient",
		}
	},
	"history": {
		"BACKEND": "django_redis.cache.RedisCache",
		"LOCATION": "redis://192.168.17.128:6379/3",
		"OPTIONS": {
			"CLIENT_CLASS": "django_redis.client.DefaultClient",
		}
	},
	"cart": {
		"BACKEND": "django_redis.cache.RedisCache",
		"LOCATION": "redis://127.0.0.1:6379/4",
		"OPTIONS": {
			"CLIENT_CLASS": "django_redis.client.DefaultClient",
		}
	},
}
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"

# 日志
LOGGING = {
	'version': 1,
	'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
	'formatters': {  # 日志信息显示的格式
		'verbose': {  # 详细模式
			'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
		},
		'simple': {  # 简单模式
			'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
		},
	},
	'filters': {  # 对日志进行过滤
		'require_debug_true': {  # django在debug模式下才输出日志
			'()': 'django.utils.log.RequireDebugTrue',
		},
	},
	'handlers': {  # 日志处理方法
		'console': {  # 向终端中输出日志
			'level': 'INFO',
			'filters': ['require_debug_true'],
			'class': 'logging.StreamHandler',
			'formatter': 'simple'  # console终端形式是简单模式
		},
		'file': {  # 向文件中输出日志
			'level': 'INFO',
			'class': 'logging.handlers.RotatingFileHandler',
			'filename': os.path.join(os.path.dirname(BASE_DIR), "logs/meiduo.log"),  # 日志文件的位置
			'maxBytes': 300 * 1024 * 1024,  # 最大300M
			'backupCount': 10,
			'formatter': 'verbose'  # file形式的是详细模式
		},
	},
	'loggers': {  # 日志器
		'django': {  # 定义了一个名为django的日志器
			'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
			'propagate': True,  # 是否继续传递日志信息
			'level': 'INFO',  # 日志器接收的最低日志级别
		},
	}
}

# DRF配置
REST_FRAMEWORK = {
	# 异常处理    exception_handler:是utils包里面的exceptions文件里面的函数
	'EXCEPTION_HANDLER': 'meiduo_mall.utils.exceptions.exception_handler',

	# 默认认证的类
	'DEFAULT_AUTHENTICATION_CLASSES': (
		'rest_framework_jwt.authentication.JSONWebTokenAuthentication',  # 放在首位表示默认用JWT的方法进行认证
		'rest_framework.authentication.SessionAuthentication',  # session认证机制
		'rest_framework.authentication.BasicAuthentication',  # 基础的认证机制
	),
	# 全局分页
	'DEFAULT_PAGINATION_CLASS': 'meiduo_mall.utils.pagination.StandardResultsSetPagination',
}

# 指定默认的用户模型类:因为我们重写了User类,所以需要重新指定
# 这样会直接报错;Invalid model reference 'meiduo_mall.apps.users.User'.
# String model references must be of the form 'app_label.ModelName'.
# 意思是:'meiduo_mall.apps.users.User'是无效的引用,字符串''里面必须是app_label.ModelName
# 子应用.模块名的格式.所以,换成以下格式:
# AUTH_USER_MODEL = 'meiduo_mall.apps.users.User'


# 但是:这样还是报错:Dependency on app with no migrations: users,
# 意思是:属于users 子应用的模型表没有迁移操作.所以需要进行迁移
AUTH_USER_MODEL = 'users.User'

# cors添加白名单.还要记得去ALLOWED_HOSTS 里面进行允许访问设置
CORS_ORIGIN_WHITELIST = (
	'127.0.0.1:8080',  # 即允许前端的域名访问后端的django程序(带有8080的都是前端的域名)
	'localhost:8080',
	# 为了高大上一点,在这里把我们自定义的域名也添加到白名单
	'www.meiduo.site:8080',  # 前端的域名
	'api.meiduo.site:8000',  # 后端的域名
)
CORS_ALLOW_CREDENTIALS = True  # 跨域允许携带cookie

# JWT的有效期
JWT_AUTH = {
	# 有效期时间为一天,尽量不要太长
	'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),

	# 覆盖jwt中原有的返回数据函数
	'JWT_RESPONSE_PAYLOAD_HANDLER': 'users.utils.jwt_response_payload_handler',
}

# 修改认证系统后端
AUTHENTICATION_BACKENDS = [
	'users.utils.UsernameMobileAuthBackend'
]

# QQ登录参数
QQ_CLIENT_ID = '101474184'
QQ_CLIENT_SECRET = 'c6ce949e04e12ecc909ae6a8b09b637c'
QQ_REDIRECT_URI = 'http://www.meiduo.site:8080/oauth_callback.html'

# 发邮箱的配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.163.com'
EMAIL_PORT = 25
# 发送邮件的邮箱
EMAIL_HOST_USER = 'itcast99@163.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'python99'
# 收件人看到的发件人
EMAIL_FROM = 'python<itcast99@163.com>'

# DRF扩展
REST_FRAMEWORK_EXTENSIONS = {
	# 缓存时间(单秒)
	'DEFAULT_CACHE_RESPONSE_TIMEOUT': 60 * 60,
	# 缓存存储
	'DEFAULT_USE_CACHE': 'default',
}

# django文件存储:覆盖掉原来django的存储位置,修改django中默认的文件存储位置
# 使用自定义的fdfs_storage文件中的FastDFSStorage存储类
DEFAULT_FILE_STORAGE = 'meiduo_mall.utils.fastdfs.fastdfs_storage.FastDFSStorage'
# fdfs_client 文件所在位置
FDFS_CLIENT_CONF = os.path.join(BASE_DIR, 'utils/fastdfs/client.conf')
# FastDFS 内置的nginx的域名和端口
FDFS_BASE_URL = 'http://192.168.17.128:8888/'

# 富⽂本编辑器ckeditor配置
CKEDITOR_CONFIGS = {
	'default': {
		'toolbar': 'full',  # ⼯具条功能
		'height': 300,  # 编辑器高度
		# 'width': 300,  # 编辑器宽
	},
}
CKEDITOR_UPLOAD_PATH = ''  # 上传图⽚保存路径，千万不可以指定.因为这里为空就是使用django的默认存储路径,
# 但是在这里我们又重写了django的文件存储路径,我们是使用fastdfs存储文件,所以这里为空就是使用fastdfs的文件存储路径
# 使⽤了FastDFS，所以此处设为''


# 静态化主⻚页存储路路径
GENERATED_STATIC_HTML_FILES_DIR = os.path.join(os.path.dirname(os.path.dirname(BASE_DIR)), 'front_end_pc')

# 定时任务
CRONJOBS = [
	# 每1分钟执⾏⼀次生成主⻚静态文件
	('*/1 * * * *', 'contents.crons.generate_static_index_html',
	 '>> /home/python/PycharmProjects/meiduo_sz20/meiduo_mall/logs/crontab.log')
]

# 解决crontab中⽂文问题
CRONTAB_COMMAND_PREFIX = 'LANG_ALL=zh_cn.UTF-8'

# Haystack
HAYSTACK_CONNECTIONS = {
	'default': {
		'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
		'URL': 'http://192.168.17.128:9200/',  # 此处为elasticsearch运行的服务器器ip地址，端⼝号固定为9200
		'INDEX_NAME': 'meiduo20',  # 指定elasticsearch建立的索引库的名称
	},
}
# 当商品添加、修改、删除数据时，自动⽣生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
