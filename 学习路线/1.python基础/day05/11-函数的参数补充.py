"""
形参:有4种类型,位置参数,默认参数(缺省参数),可变参数(不定长 参数).字典类型可变参数



实参:2种类型 普通实参,关键字参数

"""

"""位置参数:普通参数  实参和形参位置数量必须一一对应"""

# def func1(num1, num2):
# 	print(num1)
#
#
# func1(10, 20)


"""
默认参数(缺省参数): 如果某个形参的值在多次使用时,都是传一样的值,我们可以把此参数改成默认参数

默认参数如果没有传递实参就用默认值,如果传递了实参就使用传递来的实参

默认参数必须放在非默认参数的后面.除非均是默认参数

"""

# def func2(a, b=2):
# 	print(a)
# 	print(b)
#
#
# func2(1) # 1,2 实参1 ,形参2(默认参数)

"""关键字参数(实参的时候):
关键字参数是实参
在实参赋值时候,给指定的形参设置指定的真实数据

如果函数中有多个默认参数时,
想给后面的那个参数设置实参,就必须以关键字参数方式进行指定


"""


def func3(a=20, b=30):
	print(a)
	print(b)


# func3(b=50)  # 一定是这种格式
# b = 50就是给指定的形参b赋值50,函数调用的时候这里就不再是b = 30,直接都是b = 50

"""可变参数(不定长参数):可以接收任意数量的实参,并且自动组包成元组
用的不多,这个参数类型

可变参数的本质是将传递的参数包装成了元组

*args:参数名官方指定的,减少沟通成本
args:英文参数的缩写

写一点,运行一点
函数内部使用的时候不需要加*
在形参名args前面加 * 是为了告诉python解释器此参数是一个可变参数
"""

# def func4(*args,a,b,): # 这样是不对的,args会把所有的实参都接收掉,后面的a,b就不会接收到实参了
# def func4(a,b,*args):
# 	print(args)
#
#
# func4(1,2,3,4)  # (1, 2, 3, 4)



# 后天:组包,解包补充说明
# 引用的问题
# 可变类型 - 不可变类型
# 模块的使用(.py文件的使用)
# 学生名片主逻辑
#
#
# 学生名片管理系统(150行左右)
