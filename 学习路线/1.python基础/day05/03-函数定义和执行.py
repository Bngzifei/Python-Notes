print('函数:')

"""函数"""

# 步骤:
# 1.定义函数 -> 类似创建变量,编写代码,实现功能.但是不会执行
# 2.调用函数 -> 执行内部编写的代码
# tab 缩进4格,shift+tab 向前进4格

# 定义函数  九九乘法表
# def multiplication_table():
#
# 	row = 1
# 	while row <= 9:
#
# 		col = 1
# 		while col <= row:
# 			print('%d * %d = %d' % (col, row, (col * row)), end='\t')
# 			col += 1
#
# 		print()
# 		row += 1

# 调用函数
# multiplication_table()




"""作用:"""

# 1.减少冗余 2.增加代码可读性 3.增加代码的复用性

# 函数名也是标识符.全部用小写字母(数字.字母.下划线组成,不能以数字开头不能和关键字重名)

# 功能->函数 函数名:见名知义

# 格式:
# def func1():
# 	print('第二个')
#
# func1()

# 常用的(类似print()这种)Python 内部常用的已经编译好了.一直是那样,为了执行速度快,提前编译好了.生成可执行文件,使用的时候直接执行即可
print('------start...------')


def func_sum():  # 当代码执行到函数定义时,函数名只会执行一次,函数名作为标识符添加到内存,便于调用
	result = 10 + 20
	print(result)


# 记得这里需要两个空行 编码规范 函数体的上下都是两个空行
func_sum()  # 当执行到函数调用时,(先去内存查找有没有此函数)就会直接执行函数内部的代码,并不会去执行定义的代码(因为函数定义的时候执行过一次了,内存里面知道了这个函数是个啥,没必要重复了.)
func_sum() # 调用一次,执行一次
# step over :步过  整个函数当做一行,直接跳过,F8
# step into : 步入 可以进入函数内部,F7
print('------over------')
