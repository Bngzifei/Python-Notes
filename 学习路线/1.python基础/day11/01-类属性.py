"""

使用场景:如果通过某个类创建出来的所有实例对象的同名属性,属性记录的值始终都一样,就使用类属性.(就是每一个实例对象的__init__()方法里面的属性值都一样)

目的:节约内存

设置:只能通过类对象去设置(就是赋新值).

可以访问:类对象和实例对象均可以访问.

定义在类的里面,方法外面.类属性被类对象所拥有.类中创建出来的所有实例对象共用一个类属性.

这个类以及类所创建的所有实例对象都可以调用这个类属性.只有一个,减少内存浪费.

刚开始不太会用,后面在优化代码的时候使用

类属性尽量使用类对象去操作.(就是类名)

私有类属性:私有后只能在类里面使用,类的外部无法使用

"""

print('-----------')


class Dog:
    # type = '狗'  # 定义类属性  方法外面,类里面就行 只会走一遍
    __type = '狗'  # 私有后只能在类里面使用,类的外部无法使用
    type1 = '狗11'  # 私有后只能在类里面使用,类的外部无法使用

    def __init__(self):
        # self.type = '狗'  # 实例属性,各自独有一份
        pass

        # type = '狗'  # 定义类属性  方法外面,类里面就行


dog1 = Dog()  # dog1 第一次init  狗  字符串(不可变类型)  是一个变量,在内存的地址中只有一个.
dog2 = Dog()  # dog2 第二次init

# Dog.type = '小狗'  # 类属性可以用实例对象或类对象获取,但设置只能通过类对象.就是只有类对象可以对其进行修改赋值操作.
dog1.type = '小花'  # 实例对象不能修改类属性,实际是给自己定义了一个新的实例属性.
print(dog1.type)  # 如果类属性和实例属性同名,类对象只会访问类属性,实例对象优先访问实例属性,

# 实例对象可以访问类属性.
print(dog2.type)  # 访问的是类属性(私有的,class外部使用类对象进行了修改),输出小狗
print(dog2.type1)  # 访问的是类属性(非私有),直接输出狗11
print(Dog.type)  # 小狗
